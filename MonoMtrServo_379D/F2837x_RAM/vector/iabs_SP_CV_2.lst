TMS320C2000 Assembler PC v20.2.5 Thu Feb  2 17:03:32 2023

Copyright (c) 1996-2018 Texas Instruments Incorporated
../vector/iabs_SP_CV_2.asm                                           PAGE    1

       1              ;;#############################################################################
       2              ;;! \file source/vector/iabs_SP_CV_2.asm
       3              ;;!
       4              ;;! \brief  C-Callable index of maximum value of an even length  real array
       5              ;;! \author David M. Alter
       6              ;;! \date   07/20/11
       7              ;;
       8              ;; HISTORY:
       9              ;;   07/20/11 - original (D. Alter)
      10              ;;
      11              ;; DESCRIPTION: C-Callable inverse absolute value of an even length complex 
      12              ;;              vector.
      13              ;;
      14              ;; FUNCTION: 
      15              ;;   extern void iabs_SP_CV_2(float32 *y, const complex_float *x, 
      16              ;;                           const Uint16 N);
      17              ;;
      18              ;; USAGE:       iabs_SP_CV_2(y, x, N);
      19              ;;
      20              ;; PARAMETERS:  float32 *y = output array
      21              ;;              complex_float *x = input array
      22              ;;              Uint16 N = length of x and y arrays (must be even)
      23              ;;
      24              ;; RETURNS:     none
      25              ;;
      26              ;; BENCHMARK:   15*N+22 cycles (including the call and return)
      27              ;;
      28              ;; NOTES:
      29              ;;   1) N must be even.
      30              ;;   2) The type 'complex_float' is defined as
      31              ;;
      32              ;;      typedef struct {
      33              ;;         float32 dat[2];
      34              ;;      } complex_float;
      35              ;;
      36              ;;    Element dat[0] is the real part, dat[1] is the imag part.
      37              ;;
      38              ;;  Group:            C2000
      39              ;;  Target Family:    C28x+FPU32
      40              ;;
      41              ;;#############################################################################
      42              ;;
      43              ;;
      44              ;; $Copyright: Copyright (C) 2022 Texas Instruments Incorporated -
      45              ;;             http://www.ti.com/ ALL RIGHTS RESERVED $
      46              ;;#############################################################################
      47                      .if __TI_EABI__
      48                      .asg iabs_SP_CV_2, _iabs_SP_CV_2
      49                      .endif
      50                  
      51                      .global _iabs_SP_CV_2
      52 00000000               .text
      53              
      54 00000000       _iabs_SP_CV_2:
      55              ;Save the utilized save on entry registers
TMS320C2000 Assembler PC v20.2.5 Thu Feb  2 17:03:32 2023

Copyright (c) 1996-2018 Texas Instruments Incorporated
../vector/iabs_SP_CV_2.asm                                           PAGE    2

      56 00000000 E203          MOV32       *SP++, R4H          ;save R4H on stack
         00000001 04BD 
      57 00000002 E203          MOV32       *SP++, R5H          ;save R5H on stack
         00000003 05BD 
      58 00000004 E203          MOV32       *SP++, R6H          ;save R6H on stack
         00000005 06BD 
      59 00000006 E203          MOV32       *SP++, R7H          ;save R7H on stack
         00000007 07BD 
      60              
      61              ;---Main loop.  Unroll once to eliminate delay slots.  Code that follows
      62              ;---has the two loop iterations heavily interleaved.  Code comments use
      63              ;---the notation x1, x2 to differentiate between loop iterations.
      64 00000008 FFC0          LSR         AL, #1              ;Divide N by 2
      65 00000009 9CFF          ADDB        AL, #-1             ;Subtract 1 from N since RPTB is 'n-1' 
      66                                                      ;times
      67 0000000a B53C          RPTB        end_loop, @AL       
         0000000b 00A9 
      68                                                      
      69              ;Compute the magnitude squared          
      70 0000000c E2AF          MOV32       R0H, *XAR5++        ;R0H = x1_re
         0000000d 0085 
      71 0000000e E300          MPYF32      R1H, R0H, R0H       ;R1H = x1_re * x1_re
         0000000f 0A85 
      72                      || MOV32    R2H, *XAR5++        ;R2H = x1_im
      73                  
      74 00000010 E2AF          MOV32       R4H, *XAR5++        ;R4H = x2_re
         00000011 0485 
      75 00000012 E309          MPYF32      R5H, R4H, R4H       ;R5H = x2_re * x2_re]
         00000013 2E85 
      76                      || MOV32    R6H, *XAR5++        ;R6H = x2_im
      77                                                      
      78 00000014 E700          MPYF32      R3H, R2H, R2H       ;R3H = x1_im * x_im1
         00000015 0093 
      79 00000016 E700          MPYF32      R7H, R6H, R6H       ;R7H = x2_im * x_im2
         00000017 01B7 
      80 00000018 E710          ADDF32      R0H, R1H, R3H       ;R0H = (x1_re * x1_re) + (x1_im * x1_im)
         00000019 00C8 
      81 0000001a E710          ADDF32      R4H, R5H, R7H       ;R4H = (x2_re * x2_re) + (x2_im * x2_im)
         0000001b 01EC 
      82              
      83              ;Compute 1/sqrt.  Use the code from the DSP28 Fast FPU Library!
      84 0000001c E692          EISQRTF32   R1H,R0H             ;R1H = Ye1 = Estimate(1/sqrt(X1))        
         0000001d 0001 
      85 0000001e E692          EISQRTF32   R5H,R4H             ;R5H = Ye2 = Estimate(1/sqrt(X2))        
         0000001f 0025 
      86 00000020 E84F          MPYF32      R2H,R0H,#0.5        ;R2H = X1*0.5
         00000021 C002 
      87 00000022 E84F          MPYF32      R6H,R4H,#0.5        ;R6H = X2*0.5
         00000023 C026 
      88 00000024 E700          MPYF32      R3H,R1H,R1H         ;R3H = Ye1*Ye1
         00000025 004B 
      89 00000026 E700          MPYF32      R7H,R5H,R5H         ;R7H = Ye2*Ye2
         00000027 016F 
      90 00000028 E700          MPYF32      R3H,R3H,R2H         ;R3H = Ye1*Ye1*X1*0.5
         00000029 009B 
TMS320C2000 Assembler PC v20.2.5 Thu Feb  2 17:03:32 2023

Copyright (c) 1996-2018 Texas Instruments Incorporated
../vector/iabs_SP_CV_2.asm                                           PAGE    3

      91 0000002a E700          MPYF32      R7H,R7H,R6H         ;R7H = Ye2*Ye2*X2*0.5
         0000002b 01BF 
      92 0000002c E8CF          SUBF32      R3H,#1.5,R3H        ;R3H = 1.5 - Ye1*Ye1*X1*0.5
         0000002d F01B 
      93 0000002e E8CF          SUBF32      R7H,#1.5,R7H        ;R7H = 1.5 - Ye2*Ye2*X2*0.5
         0000002f F03F 
      94 00000030 E700          MPYF32      R1H,R1H,R3H         ;R1H = Ye1 = Ye1*(1.5 - Ye1*Ye1*X1*0.5)
         00000031 00C9 
      95 00000032 E700          MPYF32      R5H,R5H,R7H         ;R5H = Ye2 = Ye2*(1.5 - Ye2*Ye2*X2*0.5)
         00000033 01ED 
      96                                                      
      97 00000034 E700          MPYF32      R3H,R1H,R2H         ;R3H = Ye1*X1*0.5
         00000035 008B 
      98 00000036 E700          MPYF32      R7H,R5H,R6H         ;R4H = Ye2*X2*0.5
         00000037 01AF 
      99 00000038 E700          MPYF32      R3H,R1H,R3H         ;R3H = Ye1*Ye1*X1*0.5
         00000039 00CB 
     100 0000003a E700          MPYF32      R7H,R5H,R7H         ;R7H = Ye2*Ye2*X2*0.5
         0000003b 01EF 
     101 0000003c E8CF          SUBF32      R3H,#1.5,R3H        ;R3H = 1.5 - Ye1*Ye1*X1*0.5
         0000003d F01B 
     102 0000003e E8CF          SUBF32      R7H,#1.5,R7H        ;R7H = 1.5 - Ye2*Ye2*X2*0.5
         0000003f F03F 
     103 00000040 E700          MPYF32      R0H,R1H,R3H         ;R0H = Ye1 = Ye1*(1.5 - Ye1*Ye1*X1*0.5)
         00000041 00C8 
     104 00000042 E700          MPYF32      R4H,R5H,R7H         ;R4H = Ye2 = Ye2*(1.5 - Ye2*Ye2*X2*0.5)
         00000043 01EC 
     105                                                      
     106 00000044 E203          MOV32       *XAR4++, R0H        ;store the first result to memory
         00000045 0084 
     107 00000046 E203          MOV32       *XAR4++, R4H        ;store the second result to memory
         00000047 0484 
     108              
     109 00000048       end_loop:
     110              
     111              ;Restore the utilized save on entry register
     112 00000048 E2AF          MOV32       R7H, *--SP          ;restore R7H from stack
         00000049 07BE 
     113 0000004a E2AF          MOV32       R6H, *--SP          ;restore R6H from stack
         0000004b 06BE 
     114 0000004c E2AF          MOV32       R5H, *--SP          ;restore R5H from stack
         0000004d 05BE 
     115 0000004e E2AF          MOV32       R4H, *--SP          ;restore R4H from stack
         0000004f 04BE 
     116              
     117              ;Finish up
     118 00000050 0006          LRETR                           ;return
     119              
     120              ;end of function iabs_SP_CV_2()
     121              ;*********************************************************************
     122              
     123                     .end

No Assembly Errors, No Assembly Warnings
