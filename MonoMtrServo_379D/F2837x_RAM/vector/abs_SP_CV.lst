TMS320C2000 Assembler PC v20.2.5 Thu Feb  2 17:03:31 2023

Copyright (c) 1996-2018 Texas Instruments Incorporated
../vector/abs_SP_CV.asm                                              PAGE    1

       1              ;;#############################################################################
       2              ;;! \file source/vector/abs_SP_CV.asm
       3              ;;!
       4              ;;! \brief  C-Callable absolute value of an even length complex vector.
       5              ;;! \author David M. Alter
       6              ;;! \date   06/21/13
       7              ;;
       8              ;; HISTORY:
       9              ;;   07/20/11 - original (D. Alter)
      10              ;;
      11              ;; DESCRIPTION: C-Callable absolute value of a complex vector
      12              ;;              y[i] = sqrt(x_re[i]^2 + x_im[i]^2)
      13              ;;
      14              ;; FUNCTION: 
      15              ;;   void abs_SP_CV(float32 *y, const complex_float *x, const Uint16 N)
      16              ;;
      17              ;; USAGE:      abs_SP_CV(x, y, N);
      18              ;;
      19              ;; PARAMETERS: float32 *y = output array
      20              ;;             complex_float *x = input array
      21              ;;             Uint16 N = length of x and y arrays
      22              ;;
      23              ;; RETURNS:    none
      24              ;;
      25              ;; BENCHMARK:  28*N+9 cycles (including the call and return)
      26              ;;
      27              ;; NOTES:
      28              ;;   1) The type 'complex_float' is defined as
      29              ;;
      30              ;;      typedef struct {
      31              ;;         float32 dat[2];
      32              ;;      } complex_float;
      33              ;;
      34              ;;    Element dat[0] is the real part, dat[1] is the imag part.
      35              ;;
      36              ;;  Group:            C2000
      37              ;;  Target Family:    C28x+FPU32
      38              ;;
      39              ;;#############################################################################
      40              ;;
      41              ;;
      42              ;; $Copyright: Copyright (C) 2022 Texas Instruments Incorporated -
      43              ;;             http://www.ti.com/ ALL RIGHTS RESERVED $
      44              ;;#############################################################################
      45              
      46                              .if __TI_EABI__
      47                              .asg abs_SP_CV, _abs_SP_CV
      48                              .endif
      49              
      50                      .global _abs_SP_CV
      51 00000000               .text
      52              
      53 00000000       _abs_SP_CV:
      54 00000000 9CFF          ADDB AL, #-1                    ;Subtract 1 from N since RPTB is 'n-1' 
      55                                                      ;times
TMS320C2000 Assembler PC v20.2.5 Thu Feb  2 17:03:31 2023

Copyright (c) 1996-2018 Texas Instruments Incorporated
../vector/abs_SP_CV.asm                                              PAGE    2

      56              ;---Main loop
      57 00000001 B52D          RPTB end_loop, @AL
         00000002 00A9 
      58              
      59              ;Compute the magnitude squared
      60 00000003 E2AF          MOV32       R0H, *XAR5++        ;R0H = x_re
         00000004 0085 
      61 00000005 E300          MPYF32      R1H, R0H, R0H       ;R1H = x_re * x_re
         00000006 0A85 
      62                      || MOV32    R2H, *XAR5++        ;R2H = x_im
      63 00000007 E700          MPYF32      R3H, R2H, R2H       ;R3H = x_im * x_im (also delay slot for 
         00000008 0093 
      64                                                      ;MPYF32||MOV32)
      65 00000009 7700          NOP                             ;delay slot
      66 0000000a E710          ADDF32      R0H, R1H, R3H       ;R0H = (x_re * x_re) + (x_im * x_im)
         0000000b 00C8 
      67 0000000c 7700          NOP                             ;delay slot
      68              
      69              ;Compute sqrt.  Use the code from the DSP28 Fast FPU Library!
      70 0000000d E692          EISQRTF32   R1H, R0H            ; R1H = Ye = Estimate(1/sqrt(X))
         0000000e 0001 
      71 0000000f E84F          MPYF32      R2H, R0H, #0.5      ; R2H = X*0.5
         00000010 C002 
      72 00000011 E700          MPYF32      R3H, R1H, R1H       ; R3H = Ye*Ye
         00000012 004B 
      73 00000013 7700          NOP
      74 00000014 E700          MPYF32      R3H, R3H, R2H       ; R3H = Ye*Ye*X*0.5
         00000015 009B 
      75 00000016 7700          NOP
      76 00000017 E8CF          SUBF32      R3H, #1.5, R3H      ; R3H = 1.5 - Ye*Ye*X*0.5
         00000018 F01B 
      77 00000019 7700          NOP
      78 0000001a E700          MPYF32      R1H, R1H, R3H       ; R2H = Ye = Ye*(1.5 - Ye*Ye*X*0.5)
         0000001b 00C9 
      79 0000001c 7700          NOP
      80 0000001d E700          MPYF32      R3H, R1H, R2H       ; R3H = Ye*X*0.5
         0000001e 008B 
      81 0000001f 7700          NOP
      82 00000020 E700          MPYF32      R3H, R1H, R3H       ; R3H = Ye*Ye*X*0.5
         00000021 00CB 
      83 00000022 7700          NOP
      84 00000023 E8CF          SUBF32      R3H, #1.5, R3H      ; R3H = 1.5 - Ye*Ye*X*0.5
         00000024 F01B 
      85 00000025 E5A0          CMPF32      R0H, #0.0           ; Check if X == 0
      86 00000026 E700          MPYF32      R1H, R1H, R3H       ; R2H = Ye = Ye*(1.5 - Ye*Ye*X*0.5)
         00000027 00C9 
      87 00000028 7700          NOP
      88 00000029 E6C1          MOV32       R1H, R0H, EQ        ; If X is zero, change the Ye estimate 
         0000002a 0001 
      89                                                      ; to 0
      90 0000002b E700          MPYF32      R0H, R0H, R1H       ; R0H = Y = X*Ye = sqrt(X)
         0000002c 0040 
      91 0000002d 7700          NOP
      92 0000002e E203          MOV32 *XAR4++, R0H              ; store the result to memory
         0000002f 0084 
TMS320C2000 Assembler PC v20.2.5 Thu Feb  2 17:03:31 2023

Copyright (c) 1996-2018 Texas Instruments Incorporated
../vector/abs_SP_CV.asm                                              PAGE    3

      93              
      94 00000030       end_loop:
      95              
      96              ;Finish up
      97 00000030 0006          LRETR                           ; return
      98              
      99              ;end of function abs_SP_CV()
     100              ;*********************************************************************
     101              
     102                     .end

No Assembly Errors, No Assembly Warnings
