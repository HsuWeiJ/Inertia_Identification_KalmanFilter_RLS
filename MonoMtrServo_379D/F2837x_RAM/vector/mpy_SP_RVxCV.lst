TMS320C2000 Assembler PC v20.2.5 Thu Feb  2 17:03:33 2023

Copyright (c) 1996-2018 Texas Instruments Incorporated
../vector/mpy_SP_RVxCV.asm                                           PAGE    1

       1              ;;#############################################################################
       2              ;;! \file source/vector/mpy_SP_RVxCV.asm
       3              ;;!
       4              ;;! \brief  C-Callable multiplication of a real vector and a complex vector
       5              ;;! \author David M. Alter
       6              ;;! \date   07/14/11
       7              ;;
       8              ;; HISTORY:
       9              ;;   07/14/11 - original (D. Alter)
      10              ;;
      11              ;; DESCRIPTION: C-Callable multiplication of a real vector and a complex vector
      12              ;;              y_re[i] = x[i]*w_re[i]
      13              ;;              y_im[i] = x[i]*w_im[i]
      14              ;;
      15              ;; FUNCTION:   
      16              ;;   extern void mpy_SP_RVxCV(complex_float *y, const complex_float *w, 
      17              ;;                            const float32 *x, const Uint16 N)
      18              ;;
      19              ;; USAGE:       mpy_SP_RVxCV(y, x, c, N);
      20              ;;
      21              ;; PARAMETERS:  complex_float *y = result complex array
      22              ;;              complex_float *w = input complex array
      23              ;;              float32 *x  = input real array
      24              ;;              Uint16 N = length of w, x, and y arrays
      25              ;;
      26              ;; RETURNS:     none
      27              ;;
      28              ;; BENCHMARK:   5*N + 15 cycles (including the call and return)
      29              ;;
      30              ;; NOTES:
      31              ;;   1) N must be at least 2.
      32              ;;   2) The inputs and return value are of type 'complex_float':
      33              ;;
      34              ;;      typedef struct {
      35              ;;         float32 dat[2];
      36              ;;      } complex_float;
      37              ;;
      38              ;;  Group:            C2000
      39              ;;  Target Family:    C28x+FPU32
      40              ;;
      41              ;;#############################################################################
      42              ;;
      43              ;;
      44              ;; $Copyright: Copyright (C) 2022 Texas Instruments Incorporated -
      45              ;;             http://www.ti.com/ ALL RIGHTS RESERVED $
      46              ;;#############################################################################
      47                      .if __TI_EABI__
      48                      .asg mpy_SP_RVxCV, _mpy_SP_RVxCV
      49                      .endif
      50                  
      51                      .global _mpy_SP_RVxCV
      52 00000000               .text
      53 00000000       _mpy_SP_RVxCV:
      54 00000000 C444          MOVL        XAR6, *-SP[4]   ;XAR6 = &x
      55 00000001 9CFE          ADDB        AL, #-2         ;Subtract 2 from N since RPTB is 'n-1' 
TMS320C2000 Assembler PC v20.2.5 Thu Feb  2 17:03:33 2023

Copyright (c) 1996-2018 Texas Instruments Incorporated
../vector/mpy_SP_RVxCV.asm                                           PAGE    2

      56                                                  ;times, and last iteration done separately
      57                                                 
      58 00000002 E2AF          MOV32       R0H, *XAR5++    ;load first w_re value
         00000003 0085 
      59                                                 
      60              ;---Main loop                      
      61 00000004 B50A          RPTB        end_loop, @AL  
         00000005 00A9 
      62                                                 
      63 00000006 E2AF          MOV32       R1H, *XAR6++    ;load next x value
         00000007 0186 
      64                                                 
      65 00000008 E300          MPYF32      R2H, R1H, R0H   ;y_re[i] = x[i]*w_re[i]
         00000009 5085 
      66                      || MOV32    R0H, *XAR5++    ;load next w_im
      67                                                 
      68 0000000a E300          MPYF32      R3H, R1H, R0H   ;y_re[i] = x[i]*w_re[i]
         0000000b 5885 
      69                      || MOV32    R0H, *XAR5++    ;load next w_re
      70                                                 
      71 0000000c E203          MOV32       *XAR4++, R2H    ;store y_re[i]
         0000000d 0284 
      72 0000000e E203          MOV32       *XAR4++, R3H    ;store y_im[i]
         0000000f 0384 
      73 00000010       end_loop:
      74              
      75              ;--- Last iteration done seperately to avoid possible pointer overrun into 
      76              ;    undefined memory
      77 00000010 E2AF          MOV32       R1H, *XAR6      ;load next x value
         00000011 01C6 
      78                                                  
      79 00000012 E300          MPYF32      R2H, R1H, R0H   ;y_re[i] = x[i]*w_re[i]
         00000013 50C5 
      80                      || MOV32    R0H, *XAR5      ;load next w_im
      81                                                  
      82 00000014 E700          MPYF32      R3H, R1H, R0H   ;y_re[i] = x[i]*w_re[i]
         00000015 000B 
      83                                                  
      84 00000016 E203          MOV32       *XAR4++, R2H    ;store y_re[i]
         00000017 0284 
      85 00000018 E203          MOV32       *XAR4, R3H      ;store y_im[i]
         00000019 03C4 
      86                                                  
      87              ;Finish up                          
      88 0000001a 0006          LRETR                       ;return
      89              
      90              ;end of function _mpy_SP_RVxCV()
      91              ;*********************************************************************
      92              
      93                     .end

No Assembly Errors, No Assembly Warnings
