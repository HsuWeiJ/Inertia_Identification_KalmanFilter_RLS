TMS320C2000 Assembler PC v20.2.5 Thu Feb  2 17:03:33 2023

Copyright (c) 1996-2018 Texas Instruments Incorporated
../vector/mpy_SP_RMxRM.asm                                           PAGE    1

       1              ;;#############################################################################
       2              ;;! \file source/vector/mpy_SP_RMxRM.asm
       3              ;;!
       4              ;;! \brief  C-Callable multiplication of two real matrices
       5              ;;! \author David M. Alter
       6              ;;! \date   09/17/15
       7              ; FILE:        
       8              ;;
       9              ;; HISTORY:
      10              ;;   09/17/15 - original (D. Alter)
      11              ;;
      12              ;; DESCRIPTION: C-Callable multiplication of two real matrices y[] = w[] * x[]
      13              ;;                where   w[] is of dimension m x n
      14              ;;                        x[] is of dimension n x p
      15              ;;                        y[] is of dimension m x p
      16              ;;
      17              ;; Note that in C, a two-dimensional array has elements stored sequentially 
      18              ;; down the column. For example, this array:
      19              ;;                             | 1 2 |
      20              ;;                             | 3 4 |
      21              ;;
      22              ;; will be stored in memory as [1, 3, 2, 4].  It could be declared in C as 
      23              ;; x[4] or x[2][2].
      24              ;;
      25              ;; FUNCTION: 
      26              ;;   extern void mpy_SP_RMxRM(float *y, const float *w, const float *x, 
      27              ;;                       const uint16_t m, const uint16_t n, const uint16_t p)
      28              ;;
      29              ;; USAGE:       mpy_SP_RMxRM(y, w, x, m, n, p);
      30              ;;
      31              ;; PARAMETERS:  float* y = pointer to result matrix
      32              ;;              float* w = pointer to 1st src matrix
      33              ;;              float* x = pointer to 2nd src matrix
      34              ;;              m = dimension m of matrices
      35              ;;              n = dimension n of matrices
      36              ;;              p = dimension p of matrices
      37              ;;
      38              ;; RETURNS:     none
      39              ;;
      40              ;; BENCHMARK: 5*m*n*p + overhead  (cycles)
      41              ;;   Note that the overhead is significant for small dimensions.
      42              ;;   For example, 
      43              ;;           m=2 n=8, p=2 takes ~274 cycles (versus 5*m*n*p = 160).
      44              ;;           m=8, n=8, p=8 takes ~3694 cycles (versus 5*m*n*p = 2560).
      45              ;;           m=64, n=64, p=64 takes ~718030 cycles (versus 5*m*n*p = 1310720).
      46              ;;   This benchmark equation is best used to guage relative performance against 
      47              ;;   other matrix multiply functions rather than for trying to determine exact 
      48              ;;   execution cycles.
      49              ;;
      50              ;; NOTES:
      51              ;; 1) There are no restrictions on the values for n, m, and p with this 
      52              ;;    function.
      53              ;; 2) If n is even and at least 4, you can use mpy_SP_RMxRM_2() for better 
      54              ;;    performance if desired.
      55              ;;
TMS320C2000 Assembler PC v20.2.5 Thu Feb  2 17:03:33 2023

Copyright (c) 1996-2018 Texas Instruments Incorporated
../vector/mpy_SP_RMxRM.asm                                           PAGE    2

      56              ;; ***PASSED PARAMETERS***
      57              ;;  XAR4 = &y[0,0]
      58              ;;  XAR5 = &w[0,0]
      59              ;;    AH = n
      60              ;;    AL = m
      61              ;;  *-SP[4] = &x[0,0]
      62              ;;  *-SP[5] = p
      63              ;;
      64              ;; ***REGISTER USAGE***
      65              ;;   AR0 = row index adder (2*m)
      66              ;;   AR1 = inner loop count seed (n-1)
      67              ;;  XAR2 = &w (working)
      68              ;;  XAR3 = &x (working)
      69              ;;  XAR4 = &y (working)
      70              ;;  XAR5 = &w[0,0]
      71              ;;   AR6 = middle loop counter (p iterations)
      72              ;;   AR7 = outer loop counter (m interations)
      73              ;;     T = middle loop count seed (p-1)
      74              ;;
      75              ;; ***STACK USAGE***
      76              ;; -SP[13] = p
      77              ;; -SP[12] = &x[0,0]
      78              ;; -SP[10] = return PC
      79              ;; -SP[8]  = saved XAR1
      80              ;; -SP[6]  = saved XAR2
      81              ;; -SP[4]  = saved XAR3
      82              ;; -SP[2]  = &y[0,0]
      83              ;; -SP[0]  = next free location
      84              ;;
      85              ;;
      86              ;;  Group:            C2000
      87              ;;  Target Family:    C28x+FPU32
      88              ;;
      89              ;;#############################################################################
      90              ;;
      91              ;;
      92              ;; $Copyright: Copyright (C) 2022 Texas Instruments Incorporated -
      93              ;;             http://www.ti.com/ ALL RIGHTS RESERVED $
      94              ;;#############################################################################
      95                      .if __TI_EABI__
      96                      .asg mpy_SP_RMxRM, _mpy_SP_RMxRM
      97                      .endif
      98                  
      99                      .global _mpy_SP_RMxRM
     100 00000000               .text
     101              
     102 00000000       _mpy_SP_RMxRM:
     103 00000000 B2BD          MOVL        *SP++, XAR1     ;Save XAR1 (save-on-entry register)
     104 00000001 AABD          MOVL        *SP++, XAR2     ;Save XAR2 (save-on-entry register)
     105 00000002 A2BD          MOVL        *SP++, XAR3     ;Save XAR3 (save-on-entry register)
     106                                                  
     107 00000003 A8BD          MOVL        *SP++, XAR4     ;Store &y[0,0] on stack
     108                                                  
     109 00000004 9DFF          ADDB        AH, #-1         ;Subtract 1 from n since RPTB is 'N-1'
     110 00000005 97A1          MOV         AR1, AH         ;AR1 = inner loop count seed (n-1)
TMS320C2000 Assembler PC v20.2.5 Thu Feb  2 17:03:33 2023

Copyright (c) 1996-2018 Texas Instruments Incorporated
../vector/mpy_SP_RMxRM.asm                                           PAGE    3

     111                                                  
     112 00000006 93A9          MOV         AH, AL          ;AH = AL = m
     113 00000007 9CFF          ADDB        AL, #-1         ;Subtract 1 from m since BANZ is 'N-1'
     114 00000008 96A7          MOV         AR7, AL         ;AR7 = outer loop counter (m-1)
     115                                                  
     116 00000009 924D          MOV         AL, *-SP[13]    ;AL = p
     117 0000000a 9CFF          ADDB        AL, #-1         ;Subtract 1 from m since BANZ is 'N-1'
     118 0000000b 2DA9          MOV         T, AL           ;T = middle loop count seed (p-1)
     119                                                  
     120 0000000c FF90          LSL         AH, #1          ;AH = 2*m (because floating pt is 2 word 
     121                                                  ;          addresses)
     122 0000000d 97A0          MOV         AR0, AH         ;AR0 = results row index adder (2*m)
     123              
     124              ;---------------------------------------------------------------
     125              ;--- Outer loop
     126              ;---------------------------------------------------------------
     127 0000000e       loop1:
     128              
     129              ; Middle loop preparation
     130 0000000e 824C          MOVL        XAR3, *-SP[12]  ;XAR3 = &x
     131 0000000f 8A42          MOVL        XAR4, *-SP[2]   ;XAR4 = &y
     132 00000010 5EAC          MOV         AR6, T          ;Load middle loop counter with seed
     133                                                  
     134 00000011 561E          SETC        AMODE           ;C2xLP addressing mode
     135                      .lp_amode                  
     136              
     137              ;-----------------------------------------------------
     138              ;--- Middle loop
     139              ;
     140              ; Results are computed on a row by row basis.  In other words,
     141              ; Row 1 of results are computed first, then row 2, etc.
     142              ;-----------------------------------------------------
     143 00000012       loop2:
     144              
     145              ; Inner loop preparation
     146 00000012 86A5          MOVL        XAR2, XAR5      ;XAR2 = &w
     147 00000013 E593          ZERO        R3H             ;Zero out the result accumulation
     148 00000014 77B2          NOP         *, ARP2         ;ARP = XAR2
     149              
     150              ;-------------------------------------------
     151              ;--- Inner loop
     152              ;-------------------------------------------
     153 00000015 B509          RPTB        end_loop3, AR1
         00000016 00A1 
     154 00000017 E2AF          MOV32       R0H, *0++, ARP3 ;R0H=w, XAR2+=AR0, ARP=XAR3
         00000018 00D3 
     155 00000019 E2AF          MOV32       R1H, *++, ARP2  ;R1H=x, ARP=XAR2
         0000001a 01C2 
     156 0000001b E700          MPYF32      R2H, R0H, R1H   
         0000001c 0042 
     157 0000001d 7700          NOP                         ;Delay slot for MPYF32
     158 0000001e E710          ADDF32      R3H, R3H, R2H   
         0000001f 009B 
     159 00000020       end_loop3:                          
     160                                                  
TMS320C2000 Assembler PC v20.2.5 Thu Feb  2 17:03:33 2023

Copyright (c) 1996-2018 Texas Instruments Incorporated
../vector/mpy_SP_RMxRM.asm                                           PAGE    4

     161              ;-------------------------------------------
     162              ;--- End of inner loop
     163              ;-------------------------------------------
     164              
     165 00000020 77B4          NOP         *, ARP4
     166 00000021 E203          MOV32       *0++, R3H       ;Store the result
         00000022 03BB 
     167 00000023 000E          BANZ        loop2, AR6--    ;Middle loop branch
         00000024 FFEF 
     168              ;-----------------------------------------------------
     169              ;--- End of middle loop
     170              ;-----------------------------------------------------
     171              
     172 00000025 5616          CLRC        AMODE           ;C28 addressing mode
     173                      .c28_amode  
     174                  
     175 00000026 0202          MOVB        ACC, #2         ;ACC = 2 (2 words per floating pt value)
     176 00000027 5601          ADDL        XAR5, ACC       ;Advance &x to the next row
         00000028 00A5 
     177 00000029 5601          ADDL        *-SP[2], ACC    ;Advance &y to the next row
         0000002a 0042 
     178                  
     179 0000002b 000F          BANZ        loop1, AR7--    ;Outer loop branch
         0000002c FFE3 
     180              ;---------------------------------------------------------------
     181              ;--- End of outer loop
     182              ;---------------------------------------------------------------
     183              
     184              ;Finish up
     185 0000002d FE82          SUBB        SP, #2          ;De-allocate local frame
     186 0000002e 82BE          MOVL        XAR3, *--SP     ;Restore XAR3 (save-on-entry register)
     187 0000002f 86BE          MOVL        XAR2, *--SP     ;Restore XAR2 (save-on-entry register)
     188 00000030 8BBE          MOVL        XAR1, *--SP     ;Restore XAR1 (save-on-entry register)
     189 00000031 0006          LRETR                       ;return
     190              
     191              ;end of function mpy_SP_RMxRM()
     192              ;**********************************************************************
     193              
     194                      .end

No Assembly Errors, No Assembly Warnings
